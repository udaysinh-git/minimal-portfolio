<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{{ title }}</title>
    <link rel="stylesheet" href="/styles/base.css" />
    <link rel="stylesheet" href="/styles/header.css" />
    <link rel="stylesheet" href="/styles/main.css" />
    <link rel="stylesheet" href="/styles/footer.css" />
    <link rel="stylesheet" href="/styles/themes.css" />
    <link rel="stylesheet" href="/styles/styles.css" />
    <link rel="stylesheet" href="/styles/icons.css" />
    <link rel="stylesheet" href="/styles/comments.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css"
      id="highlight-theme"
    />
    <link
      rel="icon"
      href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üêß</text></svg>"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <body class="{{ theme }}">
    <header>
      <div class="container">
        <nav id="nav-menu" class="nav-menu">
          <ul>
            <li>
              <a href="/" class="{% if title == 'Home' %}active{% endif %}"
                >~/home</a
              >
            </li>
            <li>/</li>
            <li>
              <a
                href="/achievements"
                class="{% if title == 'Achievements' %}active{% endif %}"
                >Achievements</a
              >
            </li>
            <li>/</li>
            <li>
              <a
                href="/github"
                class="{% if title == 'GitHub Repos' %}active{% endif %}"
                >GitHub Repos</a
              >
            </li>
            <li>/</li>
            <li>
              <a
                href="/creative"
                class="{% if title == 'Creative' %}active{% endif %}"
                >Creative</a
              >
            </li>
            <li>/</li>
            <li>
              <a href="/blog" class="active">Blog</a>
            </li>
            <li>/</li>
            <li>
              <a
                href="/resume"
                class="{% if title == 'Resume' %}active{% endif %}"
                >Resume</a
              >
            </li>
            <li>/</li>
            <li>
              <a
                href="/contact"
                class="{% if title == 'Contact' %}active{% endif %}"
                >Contact</a
              >
            </li>
            <li>/</li>
            <li>
              <a href="#" id="theme-toggle">themes</a>
            </li>
          </ul>
        </nav>
      </div>
    </header>
    <main class="container">
      <article class="post-content slide-in-right">
        <h1>{{ title }}</h1>
        <div class="post-meta">
          <p>Published on: {{ date }}{% if time %} at {{ time }}{% endif %}</p>
          <div
            class="post-views-display"
            data-slug="{{ page.url | replace('/posts/', '') | replace('/', '') | replace('.html', '') }}"
          >
            <svg
              class="eye-icon"
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <circle
                cx="12"
                cy="12"
                r="3"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
            <span class="view-count">-</span> views
          </div>
        </div>
        {{ content | safe | replace('<img', '<img loading="lazy"') }}
      </article>

      <!-- Comments Section -->
      {% include "comments.njk" %}
    </main>
    <footer>
      <div class="footer-container">
        <div class="footer-left">
          <p>&copy; {{ currentYear }} Udaysinh's Portfolio</p>
        </div>
        <div class="footer-right">
          <a
            href="https://github.com/udaysinh-git/minimal-portfolio"
            target="_blank"
            rel="noopener noreferrer"
            class="github-link"
          >
            View Source on GitHub
          </a>
        </div>
      </div>
    </footer>
    <button id="back-to-top" aria-label="Back to top">‚òùüèª</button>
    <div id="theme-toast" class="theme-toast">
      Theme changed to: <span id="theme-name"></span>
    </div>
    <div id="font-toast" class="theme-toast">
      Font changed to: <span id="font-name"></span>
    </div>
    <button class="fab" id="fab">
      <svg
        class="cog-icon"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <circle
          cx="12"
          cy="12"
          r="3"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        />
        <path
          d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        />
      </svg>
    </button>
    <div class="fab-options">
      <button id="increase-font">A+</button>
      <button id="decrease-font">A-</button>
      <button id="font-switcher">Switch Font</button>
    </div>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"
      defer
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/python.min.js"
      defer
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/javascript.min.js"
      defer
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/bash.min.js"
      defer
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/css.min.js"
      defer
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/html.min.js"
      defer
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/json.min.js"
      defer
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/typescript.min.js"
      defer
    ></script>
    <script src="/scripts/comments.js" defer></script>
    <script src="/scripts/blur-images.js" defer></script>
    <script src="/scripts/masonry-enhancer.js" defer></script>
    <script src="/scripts/lightbox.js" defer></script>
    <script>
      // Native clipboard functionality to replace clipboard.js
      function copyToClipboard(text) {
        if (navigator.clipboard && window.isSecureContext) {
          return navigator.clipboard.writeText(text)
        } else {
          // Fallback for older browsers
          const textArea = document.createElement("textarea")
          textArea.value = text
          textArea.style.position = "fixed"
          textArea.style.left = "-999999px"
          textArea.style.top = "-999999px"
          document.body.appendChild(textArea)
          textArea.focus()
          textArea.select()
          return new Promise((res, rej) => {
            document.execCommand("copy") ? res() : rej()
            textArea.remove()
          })
        }
      }

      // Function to load and display view count for the current post
      async function loadPostViewCount() {
        try {
          const viewDisplay = document.querySelector(".post-views-display")
          if (!viewDisplay) {
            console.log("View display element not found for loading count")
            return
          }

          const slug = viewDisplay.getAttribute("data-slug")
          const viewCountElement = viewDisplay.querySelector(".view-count")

          if (!slug) {
            console.log("No slug found for loading view count")
            return
          }

          console.log("Loading view count for slug:", slug)

          const response = await fetch("/.netlify/functions/blog-views")
          if (response.ok) {
            const data = await response.json()
            const blogViews = data.blogViews || []

            // Find matching blog view data
            const blogView = blogViews.find((view) => view.slug === slug)
            if (blogView) {
              viewCountElement.textContent = blogView.views
              console.log("View count loaded:", blogView.views)
            } else {
              viewCountElement.textContent = "0"
              console.log("No view data found for slug:", slug)
            }
          } else {
            console.error(
              "Failed to load view count:",
              response.status,
              response.statusText
            )
            viewCountElement.textContent = "?"
          }
        } catch (error) {
          console.error("Error loading post view count:", error)
          const viewCountElement = document.querySelector(".view-count")
          if (viewCountElement) {
            viewCountElement.textContent = "?"
          }
        }
      }

      // Blog view tracking
      async function trackBlogView() {
        try {
          // Get the slug from the data-slug attribute instead of parsing URL
          const viewDisplay = document.querySelector(".post-views-display")
          if (!viewDisplay) {
            console.log("View display element not found")
            return
          }

          const slug = viewDisplay.getAttribute("data-slug")
          if (!slug) {
            console.log("No slug found in data-slug attribute")
            return
          }

          // Get the blog title
          const title = document.querySelector("h1").textContent

          // Check if we've already tracked this view recently (within 30 minutes)
          const viewKey = `blog_view_${slug}`
          const lastViewTime = localStorage.getItem(viewKey)
          const now = Date.now()
          const thirtyMinutes = 30 * 60 * 1000 // 30 minutes in milliseconds

          if (lastViewTime && now - parseInt(lastViewTime) < thirtyMinutes) {
            console.log("View already tracked recently, skipping...")
            return // Already tracked within 30 minutes
          }

          console.log("Tracking view for slug:", slug, "title:", title)

          // Track the view
          const response = await fetch("/.netlify/functions/blog-views", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              slug: slug,
              title: title,
            }),
          })

          if (response.ok) {
            // Mark as tracked with timestamp
            localStorage.setItem(viewKey, now.toString())
            console.log("Blog view tracked successfully")

            // Reload the view count to show the updated number
            loadPostViewCount()
          } else {
            console.error(
              "Failed to track blog view:",
              response.status,
              response.statusText
            )
          }
        } catch (error) {
          console.error("Error tracking blog view:", error)
        }
      }

      // Add copy functionality to code blocks
      document.addEventListener("DOMContentLoaded", function () {
        // Track blog view when page loads
        trackBlogView()

        // Load and display view count for this post
        loadPostViewCount()

        // Ensure highlight.js syntax highlighting is applied
        function highlightCode() {
          if (window.hljs) {
            hljs.highlightAll()
            console.log("highlight.js highlighting applied")
          } else {
            console.log("highlight.js not loaded yet, retrying...")
            setTimeout(highlightCode, 100)
          }
        }

        // Start highlighting process
        highlightCode()

        // Function to update highlight.js theme based on current theme
        function updateHighlightTheme() {
          const currentTheme = document.body.className || "dark-mode"
          const themeLink = document.getElementById("highlight-theme")

          if (
            currentTheme.includes("light") ||
            currentTheme.includes("pastel") ||
            currentTheme.includes("eye-soothing")
          ) {
            themeLink.href =
              "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css"
          } else {
            themeLink.href =
              "https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css"
          }

          // Re-highlight after theme change
          if (window.hljs) {
            hljs.highlightAll()
          }
        }

        // Update theme on page load
        updateHighlightTheme()

        // Listen for theme changes
        const observer = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            if (
              mutation.type === "attributes" &&
              mutation.attributeName === "class"
            ) {
              updateHighlightTheme()
            }
          })
        })

        observer.observe(document.body, {
          attributes: true,
          attributeFilter: ["class"],
        })

        // Add copy buttons to code blocks
        document.querySelectorAll("pre code").forEach(function (codeBlock) {
          const pre = codeBlock.parentElement
          const button = document.createElement("button")
          button.textContent = "Copy"
          button.style.cssText =
            "position: absolute; top: 5px; right: 5px; padding: 4px 8px; font-size: 12px; background: #444; color: white; border: none; border-radius: 3px; cursor: pointer;"
          pre.style.position = "relative"
          pre.appendChild(button)

          button.addEventListener("click", function () {
            const code = codeBlock.textContent
            copyToClipboard(code)
              .then(function () {
                button.textContent = "Copied!"
                setTimeout(function () {
                  button.textContent = "Copy"
                }, 2000)
              })
              .catch(function () {
                button.textContent = "Failed"
                setTimeout(function () {
                  button.textContent = "Copy"
                }, 2000)
              })
          })
        })
      })
    </script>
    <script>
      const themeToggle = document.getElementById("theme-toggle")
      const fab = document.getElementById("fab")
      const fabOptions = document.querySelector(".fab-options")
      const backToTopButton = document.getElementById("back-to-top")
      const themeToast = document.getElementById("theme-toast")
      const themeName = document.getElementById("theme-name")
      const fontToast = document.getElementById("font-toast")
      const fontName = document.getElementById("font-name")
      const fontSwitcherButton = document.getElementById("font-switcher")

      const themes = [
        "dark-mode",
        "light-mode",
        "pastel-mode",
        "eye-soothing-mode",
        "solarized-dark-mode",
        "solarized-light-mode",
        "monokai-mode",
        "dracula-mode",
        "gruvbox-dark-mode",
        "nord-mode",
        "one-dark-mode",
        "material-dark-mode",
        "material-light-mode",
      ]
      let currentThemeIndex = 0

      const fonts = [
        { name: "Inter", family: "'Inter', sans-serif" },
        { name: "Montserrat", family: "'Montserrat', sans-serif" },
        { name: "Open Sans", family: "'Open Sans', sans-serif" },
        { name: "Roboto", family: "'Roboto', sans-serif" },
        { name: "Lato", family: "'Lato', sans-serif" },
        { name: "Courier Prime", family: "'Courier Prime', monospace" },
      ]
      let currentFontIndex = 0

      // Detect user's preferred color scheme
      const prefersDarkScheme = window.matchMedia(
        "(prefers-color-scheme: dark)"
      ).matches
      const prefersLightScheme = window.matchMedia(
        "(prefers-color-scheme: light)"
      ).matches

      // Load saved theme or set based on user's system preference
      const savedTheme = localStorage.getItem("theme")
      if (savedTheme) {
        document.body.className = savedTheme
        currentThemeIndex = themes.indexOf(savedTheme)
      } else {
        // Default to system preference (dark or light)
        if (prefersDarkScheme) {
          document.body.className = "dark-mode"
          currentThemeIndex = themes.indexOf("dark-mode")
        } else {
          // Default to light mode (system default or fallback)
          document.body.className = "light-mode"
          currentThemeIndex = themes.indexOf("light-mode")
        }
      }

      if (themeToggle) {
        themeToggle.addEventListener("click", () => {
          currentThemeIndex = (currentThemeIndex + 1) % themes.length
          const newTheme = themes[currentThemeIndex]
          document.body.className = newTheme
          localStorage.setItem("theme", newTheme)

          // Show toast notification
          themeName.textContent = newTheme.replace(/-/g, " ")
          themeToast.classList.add("show")
          setTimeout(() => {
            themeToast.classList.remove("show")
          }, 3000)
        })
      }

      if (fab) {
        fab.addEventListener("click", () => {
          fab.classList.toggle("show-options")
        })
      }

      // Show back-to-top
      if (backToTopButton) {
        window.addEventListener("scroll", () => {
          if (window.scrollY > 300) {
            backToTopButton.classList.add("show")
          } else {
            backToTopButton.classList.remove("show")
          }
        })

        backToTopButton.addEventListener("click", () => {
          window.scrollTo({ top: 0, behavior: "smooth" })
        })
      }

      const increaseFontButton = document.getElementById("increase-font")
      const decreaseFontButton = document.getElementById("decrease-font")
      const blogContent = document.querySelector("main article")

      if (increaseFontButton && blogContent) {
        increaseFontButton.addEventListener("click", () => {
          const currentFontSize = window.getComputedStyle(blogContent).fontSize
          const newFontSize = parseFloat(currentFontSize) + 2
          blogContent.style.fontSize = `${newFontSize}px`
        })
      }

      if (decreaseFontButton && blogContent) {
        decreaseFontButton.addEventListener("click", () => {
          const currentFontSize = window.getComputedStyle(blogContent).fontSize
          const newFontSize = parseFloat(currentFontSize) - 2
          blogContent.style.fontSize = `${newFontSize}px`
        })
      }

      const postContent = document.querySelector(".post-content")

      if (fontSwitcherButton && postContent) {
        fontSwitcherButton.addEventListener("click", () => {
          currentFontIndex = (currentFontIndex + 1) % fonts.length
          const newFont = fonts[currentFontIndex]
          postContent.style.setProperty(
            "--font-family",
            newFont.family
          ) /* Update CSS variable for post */
          localStorage.setItem("font", newFont.family)

          // Show toast notification
          fontName.textContent = newFont.name
          fontToast.classList.add("show")
          setTimeout(() => {
            fontToast.classList.remove("show")
          }, 3000)
        })
      }

      // Load saved font for post
      const savedFont = localStorage.getItem("font")
      if (savedFont) {
        postContent.style.setProperty("--font-family", savedFont)
        currentFontIndex = fonts.findIndex((font) => font.family === savedFont)
      }
    </script>
  </body>
</html>
